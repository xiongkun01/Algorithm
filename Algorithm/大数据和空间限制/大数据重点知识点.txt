一、介绍哈希函数
哈希函数又叫散列函数，哈希函数的输入域可以是非常大的范围，但是输出域
是固定范围。假设为s。
哈希函数的性质：
1、典型的哈希函数都拥有无限的输入值域。
2、输入值相同时，返回值一样。
3、输入值不同时，返回值可能一样，也可能不一样。
4、不同输入值得到的哈希值，整体均匀的分布在输出域s上。（重要）

注意：1-3点性质是哈希函数的基础，第4点是评价一个哈希函数优劣的关键。


二、介绍map-reduce
1、map阶段：把大任务分成子任务。

2、Reduce阶段：子任务并发处理，然后合并结果。

难点：工程上的处理。
注意点：
1、备份的考虑，分布式存储的设计细节，以及容灾策略。
2、任务分配策略与任务进度跟踪的细节设计，节点状态的呈现。
3、多用户权限的控制。

例题：
1、用map-reduce方法统计一篇文章中每个单词出现的个数。


三、常见海量处理题目的关键
1、分而治之。通过哈希函数将大任务分流到机器，或分流到小文件。

2、常用的hashMap或bitMap。

难点：通讯、时间和空间的估算。


例题：
1、请对10亿个IPV4的IP地址进行排序，每个IP地址出现一次。

2、请对10亿个人的年龄进行排序。

3、有一个包含20亿个全是32位整数的大文件，在其中找到出现次数最多
的数。但是内存限制只有2G。

4、32位无符号整数的范围是0~4294967295。现在有一个正好包含40亿个
无符号整数的文件，所以在整个范围中必然有没出现过的数。可以使用
最多10M的内存，只用找到一个没出现过的数即可，该如何找？
总结：
4.1、根据内存限制决定区间大小，根据区间大小，得到有多少个变量，来记录
每个区间的数出现的次数。
4.2、统计区间上的数的出现次数，找到不足的区间。
4.3、利用bitmap对不满的区间，进行这个区间上的数的词频统计。

5、某搜索公司一天的用户搜索词汇是海量的，假设有百亿的数据量，请设计一种
求出每天最热100词的可行办法。
求解：可以使用哈希函数进行分流到不同的机器。

6、工程师常使用服务器集群来设计和实现数据缓存，以下是常见的策略。1、无论是
添加、查询还是删除数据，都先将数据的ID通过哈希函数转换到一个哈希值，记为key。
2、如果目前机器有N台，则计算key%N的值，这个值就是该数据所属的机器编号，无论是
添加、删除还是查询操作，都只在这个机器上进行。请分析这种缓存策略可能带来的问题，
并提出改进的方案。
解法：一致性哈希算法。

四、布隆过滤器
一个布隆过滤器精确的代表一个集合，并可以精确判断一个元素是否在集合中。注意，
只是精确代表和精确判断，到底有多精确呢？则完全在于你具体的设计，
但想做到完全正确是不太可能的。布隆过滤器的优势就在于使用很少
的空间就可以将准确率做到很高的程度，该结构由Burton Howard Bloom于1970年提出。

假设有一个长度为m的bit类型的数组，即数组中的每一个位置都是bit类型，如我们所知，每一个bit只有0和1两种状态。
再假设一共有k个哈希函数，这些输出域S都大于或等于m，并且这些哈希函数都足够优秀，那么对同一个输入对象（
假设是一个字符串记为URL），经过k个哈希函数算出来的结果也是独立的，可能相同，也可能不同，但彼此独立。
对算出来的每一个结果都对m取余(%m)，然后在bit array上把相应的位置设置为1（涂黑）,我们把bit类型的数组记为
bitMap。至此，一个输入对象对bitmap的影响过程就结束了，也就是把bitMap的一些位置涂黑。接下来按照该方法处理所有
的输入对象，每个对象都可能把bitMap的一些位置涂黑，也可能遇到涂黑的位置，遇到已经涂黑的位置则让其继续为黑即可。处理完所有的输入对象，可能bitMap中已经有相当多的位置被涂黑。至此一个布隆过滤器生成完毕，
这个布隆过滤器代表之前所有输入对象组成的集合。
已知：失误率为p和样本数为n，
则布隆过滤器的大小为m = -1 * (n * lnp) / (ln2)^2
则可以求出哈希函数的数量k = (ln2) * (m / n) = 0.7 * (m / n);